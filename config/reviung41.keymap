/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        ht: ht {
            compatible = "zmk,behavior-hold-tap";
            label = "Hold tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };
    };

    macros {
        playswitch: playswitch {
            compatible = "zmk,behavior-macro";
            label = "PLAYSWITCH";
            #binding-cells = <0>;
            bindings = <&kp LA(LC(F11))>;
        };

        recswitch: recswitch {
            compatible = "zmk,behavior-macro";
            label = "RECSWITCH";
            #binding-cells = <0>;
            bindings = <&kp LA(LC(F7))>;
        };

        recmute: recmute {
            compatible = "zmk,behavior-macro";
            label = "RECMUTE";
            #binding-cells = <0>;
            bindings = <&kp LA(LC(M))>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer_0 {
            bindings = <
&kp ESC          &ht N1 Q          &ht N2 W      &ht N3 F             &ht N4 P           &ht N5 D                       &ht N6 J         &ht N7 L                &ht N8 U                &ht N9 Y                 &ht N0 SEMICOLON  &kp BSPC
&ht LA(TAB) TAB  &ht AT_SIGN A     &ht POUND R   &ht QUESTION S       &ht EXCLAMATION T  &ht MINUS G                    &ht KP_PLUS H    &ht EQUAL N             &ht LEFT_PARENTHESIS E  &ht RIGHT_PARENTHESIS I  &ht PERCENT O     &kp SQT
&kp LGUI         &ht UNDERSCORE Z  &ht DOLLAR X  &ht DOUBLE_QUOTES C  &ht SQT V          &ht COLON B                    &ht SEMICOLON K  &ht NON_US_BACKSLASH M  &kp COMMA               &kp DOT                  &kp FSLH          &mo 2
                                                 &mo 0                &lt 1 SPACE                     &kp LEFT_CONTROL                   &kp LSHFT               &kp LALT
            >;
        };

        numpad {
            bindings = <
&kp C_MUTE    &kp PG_UP  &kp KP_EQUAL        &kp UP_ARROW    &kp MINUS        &kp DOLLAR            &kp STAR  &kp N7     &kp N8  &kp N9  &kp MINUS  &kp BSPC
&kp C_VOL_UP  &kp TAB    &kp LEFT_ARROW      &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp KP_EQUAL          &kp FSLH  &kp N4     &kp N5  &kp N6  &kp PLUS   &kp DEL
&kp C_VOL_DN  &kp PG_DN  &kp LG(LEFT_ARROW)  &kp LS(LG(S))   &kp LG(RIGHT)    &kp HASH              &kp N0    &kp N1     &kp N2  &kp N3  &kp DOT    &trans
                                             &trans          &trans                         &trans            &kp ENTER  &trans
            >;
        };

        function {
            bindings = <
&kp ESC  &kp F1  &kp F2  &kp F3  &kp F4  &kp F5                     &kp F6        &kp F7          &kp F8        &kp F9        &kp F10       &trans
&trans   &trans  &trans  &trans  &trans  &ext_power EP_TOG          &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_CLR
&trans   &trans  &trans  &trans  &trans  &trans                     &kp CAPS      &kp KP_NUMLOCK  &trans        &trans        &trans        &trans
                         &trans  &trans                     &trans                &trans          &trans
            >;
        };

        layer_3 {
            bindings = <
&trans  &trans  &trans  &trans    &trans    &trans            &trans          &trans           &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans    &trans    &trans            &trans          &trans           &trans  &trans  &trans  &trans
&trans  &trans  &trans  &kp BSLH  &kp LBKT  &kp RBKT          &kp LEFT_BRACE  &kp RIGHT_BRACE  &none   &none   &trans  &trans
                        &trans    &trans              &trans                  &trans           &trans
            >;
        };
    };
};
